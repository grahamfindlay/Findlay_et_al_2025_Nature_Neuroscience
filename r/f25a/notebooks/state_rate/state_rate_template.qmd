---
params:
  title: 'Cortical spindle rate by state (Extended Data Fig. 7D)'
  fstem: ExtFig7D1
  response_variable: "Cortical.Spindle.Rate"
title: "`r params$title`"
---
```{r}
#| eval: false
#| include: false
params <- list()
params$response_variable <- "Cortical.Spindle.Rate"
```
```{r}
#| include: false
library(arrow)
library(devtools)
library(here)
devtools::load_all()

spindle_data_path <- system.file("extdata", "cortical_spindle_state_rates.pqt", package = "f25a")
spindle_data <- arrow::read_parquet(spindle_data_path)
dspk_data_path <- system.file("extdata", "dspk_state_rates.pqt", package = "f25a")
dspk_data <- arrow::read_parquet(dspk_data_path)
d <- merge(spindle_data, dspk_data, by = c("subject", "experiment", "state"), all = TRUE)
state_levels <- c(
    "Wake",
    "NREM",
    "IS",
    "REM"
)
d <- subset(d, d$state %in% state_levels)
d$state <- factor(d$state, levels = state_levels)
exp_levels <- c("Novelty", "Locomotion", "Dual")
d$experiment <- factor(d$experiment, levels = exp_levels)
d$subject <- factor(d$subject)

result <- list()
result$data <- d
result$data[[params$response_variable]] <- sqrt(result$data[[params$response_variable]])
result$models <- fit_nested_models(
    result$data,
    params$response_variable,
    "state",
    "experiment",
    "subject"
)

# Check model fit and assumptions
plot(result$models$full) # Plot model fit
qqnorm(residuals(result$models$full)) # QQ plot of residuals
qqline(residuals(result$models$full)) # Add QQ line

nod_cm <- create_pairwise_primary_contrasts(
    result$models$full,
    "state",
    "experiment",
    "Novelty"
)

cow_cm <- create_pairwise_primary_contrasts(
    result$models$full,
    "state",
    "experiment",
    "Locomotion"
)
ctn_cm <- create_pairwise_primary_contrasts(
    result$models$full,
    "state",
    "experiment",
    "Dual"
)
main_effect_cm <- create_pairwise_primary_main_effect_contrasts(
    result$models$reduced,
    "state"
)
result$interaction <- test_interaction_with_experiment(
    result$data,
    result$models,
    nod_cm,
    cow_cm,
    ctn_cm
)
if (result$interaction$pval >= 0.05) {
    result$main_effect <- test_main_effect(
        result$data,
        result$models,
        main_effect_cm
    )
}

sig_interaction <- result$interaction$pval < 0.05
sig_main_effect <-
    !sig_interaction && (result$main_effect$pval < 0.05)

if (sig_interaction) {
    interaction_effect_size_msg <- paste(
        "Cohen's local f^2 analogue for interaction:",
        format(round(result$interaction$effect_size$fsquared, 3), nsmall = 3)
    )
    nod_msg <- format_posthoc_summary(result$interaction$posthoc$nod)
    cow_msg <- format_posthoc_summary(result$interaction$posthoc$cow)
    ctn_msg <- format_posthoc_summary(result$interaction$posthoc$ctn)
}

if (sig_main_effect) {
    main_effect_effect_size_msg <- paste(
        "Cohen's local f^2 analogue for main effect:",
        format(round(result$main_effect$effect_size$fsquared, 3), nsmall = 3)
    )
    pst_msg <- format_posthoc_summary(result$main_effect$posthoc)
}
```

```{r}
# Test for interaction between state and experiment.
print(result$interaction$anova)
```

```{r}
#| eval: !expr 'sig_interaction'
#| include: !expr 'sig_interaction'
print(interaction_effect_size_msg)
cat(nod_msg, sep = "\n") # Post-hoc tests for Novelty.
cat(cow_msg, sep = "\n") # Post-hoc tests for Locomotion.
cat(ctn_msg, sep = "\n") # Post-hoc tests for Dual.
```

```{r}
#| eval: !expr '!sig_interaction'
#| include: !expr '!sig_interaction'
# Test for main effect of state.
print(result$main_effect$anova)
```

```{r}
#| eval: !expr 'sig_main_effect'
#| include: !expr 'sig_main_effect'
print(main_effect_effect_size_msg)
cat(pst_msg, sep = "\n") # Post-hoc tests in the absence of interaction.
```
